#include<iostream>
#include<cstring>
#include<string>
#include<math.h>
using namespace std;



//void dream(string& name) 
//{
//	cout << name << "在梦境中是桑酒"<<endl;
//	cout << "�ξ�����" << endl;
//}
//
//
//
//int main()
//{
//	string name = {"黎苏苏"};
//	cout << "现在是：" << name << endl;
//
//	string& ye_xi_wu = name;
//
//
//	dream(ye_xi_wu);
//	
//
//	return 0;
//}

#include<vector>
//class S {
//public:
//    int longestArithSeqLength(vector<int>& nums) {
//
//        if (nums.size() == 2)return 2;
//        int n = 0;
//        int max = 0, count = 2, l = nums.size();
//
//        cout << endl;
//        for (int q = 0; q < l - 2; ++q)
//        {
//            for (int i = q + 1; i < l; ++i)
//            {
//                count = 2;
//                int j = i + 1;
//                n = nums[q] - nums[i];
//                for (int ii = i; j < l; ++j)
//                {
//                    int k = nums[ii] - nums[j];
//                    if (n == k)
//                    {
//                        ii = j;
//                        count += 1;
//                        //cout<<nums[q]<<" "<<nums[ii]<<"  "<<k<<" "<<count<<endl;
//                    }
//                }
//                max = count > max ? count : max;
//            }
//        }
//        return max;
//    }
//};
//
//
//int main()
//{
//	vector<int> nums = { 169,79,178,232,57,11,448,231,489,173,295,438,444,224,479,270,199,152,52,485,380,258,358,468,19,362,413,350,305,242,132,273,87,409,174,293,356,239,352,482,187,387,136,252,482,179,132,93,216,151,144,300,128,258,392,193,252,48,316,316,496,161,431,323,32,461,290,447,384,288,422,271,494,467,497,175,428,202,461,118,437,316,2,104,67,211,156,20,74,474,412,445,209,218,373,464,70,170,38,255,340,492,347,131,424,317,60,144,177,345,399,376,157,423,149,159,308,252,1,70,293,193,480,369,288,139,108,342,454,116,453,498,303,208,421,254,298,222,170,341,250,55,320,465,65,193,71,321,128,34,172,382,420,331,46,397,17,162,95,298,97,175,340,459,441,55,209,186,476,191,313,31,115,70,4,294,126,14,184,194,313,326,104,103,464,13,446,214,385,474,181,108,75,99,398,150,77,417,199,41,421,32,238,256,216,391,183,183,90,429,318,244,101,453,493,201,403,150,366,237,366,160,29,209,59,209,69,323,134,92,121,136,212,96,313,405,86,252,56,368,324,115,183,387,496,106,225,60,177,21,278,64,260,311,337,259,216,23,275,407,242,358,184,327,85,427,456,369,347,188,58,251,331,318,81,217,372,491,119,94,293,105,243,35,65,207,360,482,382,112,120,67,409,474,98,43,29,450,194,441,480,411,174,131,423,274,398,209,445,392,54,389,197,448,222,173,43,317,223,54,88,87,405,308,446,423,239,150,333,246,46,6,493,166,64,295,321,236,413,288,254,474,265,4,3,209,267,228,122,120,277,185,90,22,76,249,305,143,429,405,372,172,16,331,22,319,401,54,491,454,337,344,50,477,99,497,469,203,278,98,489,473,121,305,380,446,80,289,205,166,155,302,309,266,191,55,376,406,304,444,427,379,434,278,379,417,349,467,186,455,379,16,46,326,130,31,494,163,442,48,400,380,496,107,97,338,43,128,165,366,125,498,122,162,271,125,370,146,193,151,372,52,444,324,444,342,500,384,18,349,116,380,293,50,480,481,281,487,244,192,39,130,282,221,165,246,146,360,419,272,477,401,409,213,395,22,263,6,36,262,127,278,295,392,315,500,101,0,197,241,227,389,332,319,4,259,458,156,221,278,427,7,188,224,194,475,174,267,10,451,423,418,330,127,33,481,281,54,91,467,310,482,422,113,33,464,277,449,441,293,434,76,254,389,310 };
//    vector<int> nums1 = { 0,8,45,88,48,68,28,55,17,24};
//
//    S s;
//    cout << s.longestArithSeqLength(nums1) << endl;
//	
//	return 0;
//
//}

string binary(int n)
{
    int num = 0, l = 7;
    string s;
    while (n)
    {
        
        num = n % 2;
        if (num == 0 && n != 0)
        {
            s.push_back('0');
        }
        else if(num == 1 && n != 0)
        {
            s.push_back('1');
        }
        n /= 2;
        l--;
    }
    l++;
    while (l)
    {
        if (l != 0)
        {
            s.push_back('0');
        }
        l--;
    }
    int le = 0,ri = 7;
    while (le < ri) 
    {
        char c = s[le];
        s[le++] = s[ri];
        s[ri--] = c;
    }

    return s;
}


int num(int n)
{
    int i = 0;
    while (n)
    {
        n /= 10;
        i += 1;
    }
    return i;
}

unsigned  int s_binary(string s)
{
    int i = 31,n = 0,k = 0, l = s.size() - 1; 
   unsigned int sum = 0 ;
    while (l>=0)
    {
        if (s[k++] == '1')
        {
            n = 1;
        }
        else
        {
            n = 0;
        }
        sum += pow(2, i--) * n;
        l--;
        
    }
    return sum;

}


int main()
{
    //int(*p)[2] = {0};
    unsigned int n = 0, i = 0;
    string s, ip;
    cin >> ip;
    int l = ip.size();


    n = atoi(&ip[i]);
    s += binary(n);

    if (n == 0)i += 2;
    else i += num(n)+1;
    n = atoi(&ip[i]);
    s += binary(n);

    if (n == 0)i += 2;
    else i += num(n) + 1;
    n = atoi(&ip[i]);
    s += binary(n);

    if (n == 0)i += 2;
    else i += num(n) + 1;
    n = atoi(&ip[i]);
    s += binary(n);

    n = s_binary(s);
    cout << "ip十进制：" << n << endl;
    return 0;
}



